THREE SUM (NC)
--------- medium

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
-> Input: nums = [-1,0,1,2,-1,-4]
-> Output: [[-1,-1,2],[-1,0,1]]
-> Explanation: 
	-> nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
	-> nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
	-> nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
	-> The distinct triplets are [-1,0,1] and [-1,-1,2].
	-> Notice that the order of the output and the order of the triplets does not matter.

Example 2:
-> Input: nums = [0,1,1]
-> Output: []
-> Explanation: The only possible triplet does not sum up to 0.

Example 3:
-> Input: nums = [0,0,0]
-> Output: [[0,0,0]]
-> Explanation: The only possible triplet sums up to 0.
 
Constraints:
-> 3 <= nums.length <= 3000
-> -105 <= nums[i] <= 105


TIME  COMPLEXITY: O(nlogn) -> sorting nums takes nlogn time
SPACE COMPLEXITY: O(n) -> set of vector of triples depends on the input space

class Solution {
public:
	vector<vector<int>> three_sum (vector<int>& nums) {
		sort(nums.begin(), nums.end());
		set<vector<int>> s;
		for (int i = 0; i < nums.size()-2; ++i) {
			int j = i+1, k = nums.size()-1;
			while (j < k) {
				if (nums[i] + nums[j] + nums[k] < 0) {
					++j;
				}
				else if (nums[i] + nums[j] + nums[k] > 0) {
					--k;
				}
				else {
					s.insert({nums[i], nums[j], nums[k]});
					++j;
				}
			}
		}
		vector<vector<int>> answer (s.begin(), s.end());
		return answer;
	}
};