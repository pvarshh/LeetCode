PRODUCT OF ARRAY EXCEPT SELF (NC)
----------------------------

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. 
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.


Example 1:
-> Input: nums = [1,2,3,4]
-> Output: [24,12,8,6]

Example 2:
-> Input: nums = [-1,1,0,-3,3]
-> Output: [0,0,9,0,0]
 
Constraints:
-> 2 <= nums.length <= 105
-> -30 <= nums[i] <= 30
-> The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.


class Solution {
public:
	vector<int> product_except_self (vector<int> nums) {
		int num_zeros = 0, product = 1;
		vector<int>	products (nums.size(), 0);
		for (auto num : nums) {
			if (num == 0) {
				++num_zeros;
				if (num_zeros > 1) {
					return products;
				}
			}
			else {
				product *= num;
			}
		}
		
		if (num_zeros == 1) { 
			for (int i = 0; i < nums.size(); ++i) {
				if (nums[i] == 0)  {
					products[i] = product;
				}
			}
		}
		else {
			for (int i = 0; i < nums.size(); ++i) {
				products[i] = product / nums[i];
			}
		}
		return products;
			
	}
};

