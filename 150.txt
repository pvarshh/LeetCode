EVALUATE REVERSE POLISH NOTATION (NC)
-------------------------------- medium

You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:
-> The valid operators are '+', '-', '*', and '/'.
-> Each operand may be an integer or another expression.
-> The division between two integers always truncates toward zero.
-> There will not be any division by zero.
-> The input represents a valid arithmetic expression in a reverse polish notation.
-> The answer and all the intermediate calculations can be represented in a 32-bit integer.


Example 1:
-> Input: tokens = ["2","1","+","3","*"]
-> Output: 9
-> Explanation: ((2 + 1) * 3) = 9

Example 2:
-> Input: tokens = ["4","13","5","/","+"]
-> Output: 6
-> Explanation: (4 + (13 / 5)) = 6

Example 3:
-> Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
-> Output: 22
-> Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
				    ((10 * (6 / (12 * -11))) + 17) + 5
				    ((10 * (6 / -132)) + 17) + 5
				    ((10 * 0) + 17) + 5
				    (0 + 17) + 5
				    17 + 5
				    22
 
Constraints:
-> 1 <= tokens.length <= 104
-> tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].


TIME  COMPLEXITY: O(n*k) -> n is size of tokens, k is size of token, for loop across vector is n time then stoi converts string to int char by char which is k time
SPACE COMPLEXITY: O(n) -> stack of integers, depends on size of input vector

class Solution {
public:
	int eval_RPN (vector<string>& tokens) {
		stack<int> s;
		for (string& token : tokens) {
			if (token == "+") {
				int first = s.top(); s.pop();
				int second = s.top(); s.pop();
				s.push(first + second);
			}
			else if (token == '-')  {
				int first = s.top(); s.pop();
				int second = s.top(); s.pop();
				s.push(second - first);
			}
			else if (token == '*') {
				int first = s.top(); s.pop();
				int second = s.top(); s.pop();
				s.push(first * second);
			}
			else if (token == '/') {
				int first = s.top(); s.pop();
				int second = s.top(); s.pop();
				s.push(second / first);
			}
			else {
				s.push(stoi(token));
			}
		return s.top();
	}
};