VALID SUDOKU (NC)
------------

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.

Note:
-> A Sudoku board (partially filled) could be valid but is not necessarily solvable.
-> Only the filled cells need to be validated according to the mentioned rules.


Example 1:
-> Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
-> Output: true

Example 2:
-> Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
-> Output: false
-> Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 
Constraints:
-> board.length == 9
-> board[i].length == 9
-> board[i][j] is a digit 1-9 or '.'


class Solution {
public:
	bool valid_row (int r, vector<vector<char>>& board) {
        set<int> s;
        for (int i = 0; i < 9; ++i) {
            if (s.find(board[r][i]) != s.end() && board[r][i] != '.') { return false; }
            s.insert(board[r][i]);
        }
        return true;
    }

    bool valid_col (int c, vector<vector<char>>& board) {
        set<int> s;
        for (int i = 0; i < 9; ++i) {
            if (s.find(board[i][c]) != s.end() && board[i][c] != '.') { return false; }
            s.insert(board[i][c]);
        }
        return true;
    }

    bool valid_three (int r, int c, vector<vector<char>>& board) {
        set<int> s;
        for (int i = r; i < r+3; ++i) {
            for (int j = c; j < c+3; ++j) {
                if (s.find(board[i][j]) != s.end() && board[i][j] != '.') { return false; }
                s.insert(board[i][j]);
            }
        }
        return true;
    }

    bool valid_sudoku (vector<vector<char>>& board) {
        vector<bool> rows (9, true);
        vector<bool> cols (9, true);
        vector<bool> threes (9, true);

        for (int i = 0; i < 9; ++i) {
            bool is_row = valid_row(i, board);
            bool is_col = valid_col(i, board);
            if (!is_row || !is_col) { return false; }
        }
        cout << '\n';

        int i = 0;
        vector<pair<int, int>> pairs = {{0,0}, {0, 3}, {0,6}, {3,0}, {3,3}, {3,6}, {6,0}, {6,3}, {6,6}};
        for (auto p : pairs) {
            bool is_three = valid_three(p.first, p.second, board);
            if (!is_three) { return false; }
            ++i;
        }

        return true;
    }
};