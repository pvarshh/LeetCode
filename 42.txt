TRAPPING RAIN WATER (NC) -> NEED TO REVISE
------------------- hard

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.


Example 1:
-> Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
-> Output: 6
-> Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
-> Input: height = [4,2,0,3,2,5]
-> Output: 9
 
Constraints:
-> n == height.length
-> 1 <= n <= 2 * 104
-> 0 <= height[i] <= 105


TIME  COMPLEXITY: O(n) -> linear search to incr / decr 2ptr
SPACE COMPLEXITY: O(1) -> no extra memory based on input size

class Solution {
public:
	int trap (vector<int>& nums) {
		int l = 0, l_max = nums[l], r = nums.size()-1, r_max = nums[r], rain_water = 0;
		while (l < r) {
			if (l_max < r_max) {
				++l;
				l_max = max(l_max, nums[l]);
				rain_water += (l_max - nums[l]);
			}
			else {
				--r;
				r_max = max(r_max, nums[r]);
				rain_water += (r_max - nums[r]);
			}
		}
		return rain_water;
	}
};