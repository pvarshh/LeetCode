wVALID PALINDROME (NC)
----------------

A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 
Example 1:
-> Input: s = "A man, a plan, a canal: Panama"
-> Output: true
-> Explanation: "amanaplanacanalpanama" is a palindrome.

Example 2:
-> Input: s = "race a car"
-> Output: false
-> Explanation: "raceacar" is not a palindrome.

Example 3:
-> Input: s = " "
-> Output: true
-> Explanation: s is an empty string "" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome.

Constraints:
-> 1 <= s.length <= 2 * 105
-> s consists only of printable ASCII characters.


TIME  COMPLEXITY: O(n) -> linear passing across each char for remove_chars()
SPACE COMPLEXITY: O(n) -> new_s is linear space for given input

class Solution {
public:
	bool valid_palindrome(string s) {
		s = remove_chars(s);
		int l = 0, r = s.size()-1;
		while (l <= r) {
			if (s[l] != s[r]) {
				return false;
			}
			++l;
			--r;
		}
		return true;
	}

	string remove_chars(string s) {
		string new_s = "";
		for (char c : s) {
			if (isalnum(c)) {
				new_s += to_lower(c);
			}
		}
		return new_s;
	}
};